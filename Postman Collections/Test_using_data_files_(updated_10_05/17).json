{
  "variables": [],
  "info": {
    "name": "Test using data files (updated 10/05/17)",
    "_postman_id": "a7b41dca-c15b-b58f-18c2-c33230a4dca4",
    "description": "| Ver |    Date    |Author| Description \n|-----|------------|------|------------\n| 1.0 | 07-21-2017 | Sri Narasimhan and Robert DiRamio |Initial draft. Doc includes Get tokens API and Register Member API.\n| 1.1 | 07-31-2017 | Sri Narasimhan |Updated Register Member API. Added Verify Member API.\n| 1.2 | 08-09-2017 | Sri Narasimhan |Register Member API  modified based on the updated business requirements on 08/01/2017. Removed Verify Member API as it is no longer needed.\n| 1.3 | 08-14-2017 | Sri Narasimhan |Added Member login API\n| 1.4 | 08-16-2017 | Sri Narasimhan |Updated Member login API to address new base path and versioning of API. Added Sendaccesscode API\n| 1.5 | 08-23-2017 | Sri Narasimhan |Updated base path of existing API to address versioning of API. Added updatememauthinfo, getmemauthinfo and verifyaccesscode API.\n| 1.6 | 08-28-2017 | Sri Narasimhan and Robert DiRamio |Added authwithssn API\n| 2.0 | 09-06-2017 | Sri Narasimhan and Robert DiRamio |Updated new Encryption Algorithm/mode and padding as per the request from Client application team to support security features using Javascript\n| 2.1 | 09-19-2017 | Sri Narasimhan and Robert DiRamio |7 new APIs added.  getcardfront, getcardback, getrecentvisits, getrecentrx, getdependentlist, getclaims and getmemberinfo\n| 2.2 | 09-25-2017 | Sri Narasimhan and Robert DiRamio |Response refactored for getmemberinfo\n| 2.3 | 10-05-2017 | Sri Narasimhan and Robert DiRamio |See Mem Info folder (getlimitedplaninfo, getmemprofile, getmempreference), Claims Info folder all new, Depclaims Info folder all new,  Dep Mem Info folder all new, Update Profile folder all new, Update Preference folder all new.\n\n\n\n# This collection uses csv files to drive each folder (scenarios) below.\n\n12 Collection Folders as follows:\n\n## Registration \n\t- Registers given users in csv.\n\t- Gettokens, registrationEncrypt, registermem\n\t> Uses Registration.csv\n\n## Login \n\t- Logs in given users in csv.\n\t- Gettokens, loginEncrypt, memberlogin\n\t> Uses Login.csv\n\n## Reg and Send Access Code\n\t- Registers, logs in and sends access code\n\t- Gettokens, regisrationEncrypt, registermem, loginEncrypt, memberlogin, sendaccesscodeEncrypt, sendaccesscode\n\t> Uses Registration.csv\n\n## Send Access Code Only\n\t- Logs in (does not register) and Sends Access Code for given users in csv.\n\t- Gettokens, loginEncrypt, memberlogin, sendaccesscodeEncrypt, sendaccesscode\n\t> Uses Login.csv\n\n## Verify Access Code \n\t- Verifies access code for given users in csv - logs in a second time to ensure scope has changed to AND_VERIFIED.\n\t- Gettokens, loginEncrypt, memberlogin, verifyaccesscodeEncrypt, verifyaccesscode, loginEncrypt2, memberlogin2\n\t> Uses VerifyAccessCode.csv (you'll need to put in the access codes)\n\n## Update Mem Auth Entry \n\t- Logs in, updates mem auth entry for all steps including authwithssn, logs in again for given users in csv.\n\t- Gettokens, loginEncrypt, memberlogin, updatememauthEncrypt1 (), updatememauthinfo1 (), updatememauthinfoEncrypt2\n\t> Uses MemAuthEntry.csv\n\n## Mem Info \n\t Logs in (scope should be ACTIVE-AUTHENTICATED-AND-VERIFIED), getcardfront, getcardback, getrecentvisits, getrecentrx, getclaims, getdependentlist, getmeminfo and decrypts response for given users in csv.\n\t- Gettokens, loginEncrypt, memberlogin, meminfoEncrypt, getcardfront, getcardback, getrecentvisits, getrecentrx, getclaims, getdependentlist, getmeminfo, getlimitedplaninfo, getmemprofile, getmempreference\n\t> Uses LoginAV.csv\n\n## Claims Info \n\t- Logs in (scope should be ACTIVE-AUTHENTICATED-AND-VERIFIED) and for the logged in member, getclaims, getclaimsfordaterange (01/01/2017-12/31/2017), getclaimsforICN, getclaimsforprovider.\n\t- Gettokens, memlogin, getclaims, getclaimsforprovider, getclaimsfordaterange, getclaimsforICN\n\t> Uses LoginClmICNProv.csv file\n\n## Depclaims Info \n\t- Logs in (scope should be ACTIVE-AUTHENTICATED-AND-VERIFIED) and for the logged in member and calls these for the depID in the file, getdepclaims, getdepclaimsfordaterange (01/01/2017-12/31/2017), getdepclaimsforICN, getdepclaimsforprovider.\n\t- Gettokens, memlogin, getdepclaims, getdepclaimsfordaterange, getdepclaimsforICN, getdepclaimsforprovider\n\t> Uses DepLoginClmICNProvWithDepID.csv file\n\n## Dep Info \n\t- Logs in (scope should be ACTIVE-AUTHENTICATED-AND-VERIFIED) and for the logged in member and calls these for the depID in the file, getdepcardinfo, getdepcardback, getdeprecentvisits, getdeprecentrx, getdepmemberinfo, getdeplimitedplaninfo.\n\t- Gettokens, getdepcardinfo, getdepcardback, getdeprecentvisits, getdeprecentrx, getdepmemberinfo, getdeplimitedplaninfo\n\t> Uses DepLoginClmICNProvWithDepID.csv file\n\n## Update Profile \n\t- Logs in (scope should be ACTIVE-AUTHENTICATED-AND-VERIFIED) and for the logged in user/member updates the user profile with some test key/value pairs.\n\t- Gettokens, memlogin, updatememprofile, getmemprofile\n\t> Uses LoginAV.csv file\n\n## Update Preference \n\t- Logs in (scope should be ACTIVE-AUTHENTICATED-AND-VERIFIED) and for the logged in user/member updates the user preferences with some test key/value pairs.\n\t- Gettokens, memlogin, updatemempreference, getmempreference\n\t> Uses LoginAV.csv file\n\n\n### Note:  open the Postman Console before running (View>Show Postman Console) to get the decrypted json responses from each request when available.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "_postman_id": "d2918ace-9699-7ee6-7de6-4245ca0490cd",
      "name": "Registration",
      "description": "uses Registration.csv file to register multiple users. This Folder only registers the users in the csv file.",
      "item": [
        {
          "_postman_id": "73dfea83-229c-4a03-905f-55a341183387",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"registrationEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "This API is used as a first step during registration and login operation. Any parameter that includes Personal Identifiable Information (PII) or Personal Health Information (PHI) either in the request or in the response cannot be sent using clear text format. This API is used for getting two separate encryption key parameters and their Ids at the client application. The key parameters are used for generating the actual key at the client application. One key is used for encrypting request parameters and the second key is used for decrypting response parameters. \n\nResponse Definition:\nresult  zero indicates a valid response  any negative number indicates an error condition\n\nkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\n\nkey1 salt  Request encryption Salt value to be used when generating the request key  \n\n\nkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\n\nkey1 phrase  Request encryption passphrase value to be used when generating the request key  \n\nkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \n\n Key2 salt  Response encryption Salt value to be used when generating the Response key  \n\nKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\n\nKey2 phrase  Response decryption passphrase value to be used when generating the response key  \n"
          },
          "response": [
            {
              "id": "a5e7d4be-8800-02b9-caae-5d704bf226a4",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:58:10 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:58:09 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "148",
              "body": "{\"result\":\"0\",\"key1id\":\"4572ceadc6414b4ab05b4bfb5e529cd6\",\"key1salt\":\"ba59245803972f0f9d537a9327c82b224abb638b66e4247eb4541761e75af0a2\",\"key1iv\":\"42be0697ee13b7bb8295206993bcbb34\",\"key1phrase\":\"9f1df9d57bfd4e48a6504207e307b568\",\"key2id\":\"d496f41c36ef46faaa5d82f0dc18d63a\",\"key2salt\":\"997fe31ec80c3ae6d043c5b1d06724837f008934df5a31ff7c1218e51f70395e\",\"key2iv\":\"e92f914619080c3c366d50859786903c\",\"key2phrase\":\"e25d9918054b486284a5e3167b695176\"}"
            }
          ]
        },
        {
          "_postman_id": "606917e2-c079-04e5-c70f-26580841ebdb",
          "name": "registrationEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** REGISTRATION ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Registration encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"registermem\");  ",
                  "",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "//console.log(\"data file mesg = : \" + data.mesg);",
                  "//console.log(\"data file key1id = : \" + data.key1id);",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"regtypein\\\":\\\"{{regtype}}\\\",\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"receiveinfo\\\":\\\"{{rinfo}}\\\",\\\"tandcagreed\\\":\\\"{{tandc}}\\\"}\",\"key1id\":\"{{key1id}}\"}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "51124165-ace8-94f8-bf7f-973dce60d917",
          "name": "registermem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "tests[\"Status code is 200\"] = (responseCode.code === 200);",
                  "",
                  "pm.test(\"Registration success:result = zero\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.result).to.eql(\"0\");",
                  "});",
                  "",
                  "if (responseCode.code === 200) {",
                  "    var registrationResp = JSON.parse(responseBody);",
                  "  // Store the result  in the environment",
                  "    postman.setEnvironmentVariable(\"result\", registrationResp.result);",
                  "    ",
                  "    console.log(\"result from registration Response: \" + environment.result);",
                  "",
                  "    ",
                  "    //postman.setNextRequest(\"test/memberlogin\");    ",
                  "} else",
                  "{",
                  "        var errorResp = JSON.parse(responseBody);",
                  "        console.log(\"ERROR: \" + errorResp.errormessage);",
                  "        console.log(\"DISPLAY ERROR: \" + errorResp.displaymessage);        ",
                  "}",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"message\":\n   {{Emesg}},\n   \"key1id\":{{Ekey1id}}\n}\n"
            },
            "url": "https://{{apiURL}}/member/v1/access/registermem",
            "description": "This API is used during the Registration flow of the application. The member provides mobile number or email address during registration. The user gets registered in the security system and a success message is returned if successful. The state of the user is changed from Anonymous user to REGISTERED-NOT-VERIFIED . If the user is already registered (verified) or already authenticated (validated with their BlueCross Insurance member details), they will get an error message."
          },
          "response": [
            {
              "id": "1a4aeb87-98aa-a309-3823-c4521c997f33",
              "name": "registermem already exists",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/registermem"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "name": "Connection",
                  "description": ""
                },
                {
                  "key": "Content-Length",
                  "value": "128",
                  "name": "Content-Length",
                  "description": ""
                },
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "name": "Content-Type",
                  "description": ""
                },
                {
                  "key": "Date",
                  "value": "Thu, 05 Oct 2017 17:40:33 GMT",
                  "name": "Date",
                  "description": ""
                },
                {
                  "key": "Server",
                  "value": "Apache-Coyote/1.1",
                  "name": "Server",
                  "description": ""
                },
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 05:40:33 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "bcbsma-test.apigee.net",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "206",
              "body": "{\"result\":\"-1\",\"errormessage\":\"[LDAP: error code 68 - Entry Already Exists]\",\"displaymessage\":\"ERROR DURING ADD USER OPERATION\"}"
            },
            {
              "id": "386340fa-35ca-8ff3-d565-4cbb580d6f16",
              "name": "registermem good response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/registermem"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        }
      ]
    },
    {
      "_postman_id": "cbf2b681-4928-4a6a-7c28-bb5fb56dad88",
      "name": "Login",
      "description": "Uses Login.csv to login multiple users. This folder only logs in the users in the csv file.",
      "item": [
        {
          "_postman_id": "bc777426-a3cf-c17d-069c-ec274cccdfbf",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"test/loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === true;    ",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "65aa3f1f-05ab-0b56-6510-8af0d4e6d07e",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:57:12 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:57:12 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "75",
              "body": "{\"result\":\"0\",\"key1id\":\"c944573fc1c84c4caf03853369088500\",\"key1salt\":\"93cdecae35968f5e7d882984bf12d91fd95831787dcda61db81a6a94a554cb21\",\"key1iv\":\"21c9feb002f9d0c4f98439254e99140a\",\"key1phrase\":\"34bd42707c4e4642b874c9399e86af8f\",\"key2id\":\"af601a142b0b496c9786d07916c24b59\",\"key2salt\":\"db9924c3899ce646ba22341fea0531e823b5e1bc284ba97ea70051505ececc76\",\"key2iv\":\"603145f176003b996d3928dc69af0fa2\",\"key2phrase\":\"c47a88cec7e549609e944c7d1a543b04\"}"
            }
          ]
        },
        {
          "_postman_id": "e64b553a-01f2-ce28-1823-ec334f8afdd3",
          "name": "test/loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === true;    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "96f30687-7fb2-40b6-9aed-6590b5794dc5",
          "name": "test/memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN REQUEST FAILED ******\"] = true === true;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token);  ",
                  "    ",
                  "    postman.setNextRequest(null);  ",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  "tests[\"Status code is 200\"] = (responseCode.code === 200);",
                  "",
                  "if (responseCode.code === 200) {",
                  "    var loginResp = JSON.parse(responseBody);",
                  "  // Store the scope name  in the environment",
                  "    postman.setEnvironmentVariable(\"loginScope\", loginResp.scopename);",
                  "  // Store the access token in the environment",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", loginResp.access_token);",
                  "    ",
                  "",
                  "    console.log(\"scope name retrieved for loginResp: \" + environment.loginScope);",
                  "    console.log(\"access token retrieved for loginResp: \" + environment.loginAccessToken);",
                  "    ",
                  "    //postman.setNextRequest(\"test/memberlogin\");    ",
                  "} else",
                  "{",
                  "        var errorResp = JSON.parse(responseBody);",
                  "        console.log(\"ERROR: \" + errorResp.errormessage);",
                  "        console.log(\"DISPLAY ERROR: \" + errorResp.displaymessage);        ",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}\n"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "403a4278-5fa2-69ec-71c6-5c52d708f53f",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}\n"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "329f1ffd-7496-29ef-a9b9-f32bac079c0f",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "443a5e3a-9412-8180-966e-b63edec621bf",
      "name": "Reg and Send Access Code",
      "description": "Uses Registration.csv file to register multiple users and send an access code. This folder both registers and sends 6 digit access code to the users in the Registration.csv file",
      "item": [
        {
          "_postman_id": "63b544aa-41f6-fead-0e6e-4c3e7c5e5e05",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"registrationEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "3b466f31-77dd-ea37-cf3a-236900f3586b",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:57:01 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:57:01 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "79",
              "body": "{\"result\":\"0\",\"key1id\":\"46faf7bfd5614db4af8f3f55159de7d5\",\"key1salt\":\"f0cffbcb1e30c992bfd76b6454fff2a4508ad935cc9207acb42f563bcad7c649\",\"key1iv\":\"f6b2930e918b8cacecd98517c9e6a94e\",\"key1phrase\":\"de466612c9924205ac75b3cd3e56c2fc\",\"key2id\":\"17ba6f505599468ca0a61735ec3f5ad6\",\"key2salt\":\"ac5c049bd7dddbd25686f23d6256cd9e8efa02d943186b19ad33182a5fb8f816\",\"key2iv\":\"09738f36d8e64722aacb19e7d4ce46ee\",\"key2phrase\":\"627ebe14ed214c35aa9ee68360b26bf7\"}"
            }
          ]
        },
        {
          "_postman_id": "d49d74e1-1104-2808-44d8-dfdbc9f3e91f",
          "name": "registrationEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** REGISTRATION ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Registration encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"registermem\");  ",
                  "",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"regtypein\\\":\\\"{{regtype}}\\\",\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"receiveinfo\\\":\\\"{{rinfo}}\\\",\\\"tandcagreed\\\":\\\"{{tandc}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "55968d09-a9f8-d8ec-67b6-af189558c9e2",
          "name": "registermem",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "",
                  "",
                  "    tests[\"Registration success:\" + data.userid] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(\"loginEncrypt\");  ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[data.testcase + \" ****** REGISTRATION FAILED ****** \" + data.userid + \" \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/registermem",
            "description": "This API is used during the Registration flow of the application. The member provides mobile number or email address during registration. The user gets registered in the security system and a success message is returned if successful. The state of the user is changed from Anonymous user to REGISTERED-NOT-VERIFIED . If the user is already registered (verified) or already authenticated (validated with their BlueCross Insurance member details), they will get an error message."
          },
          "response": [
            {
              "id": "f8a781ca-03de-b06a-21e3-5a3d41b5b374",
              "name": "registermem ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/registermem"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "6cefa211-ef54-175b-3eea-8ecbaf90191e",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(\"Login Scope: \" + jsonData.scopename);",
                  "    console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"sendaccesscodeEncrypt\");  ",
                  "",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}\n"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "97a21d09-df7c-1eb5-b3a8-22604498d906",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}\n"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "d2722f6d-4600-152e-d6e5-6199b93f9daa",
          "name": "sendaccesscodeEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** SEND ACCESS CODE ENCRYPT FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Send Access Code encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"sendaccesscode\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n   \"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "512f35f0-b276-e241-0fa9-5a5d70bfb53d",
          "name": "sendaccesscode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Send Access Code success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Success\");",
                  "    postman.setNextRequest(null);  ",
                  "    ",
                  "}else{",
                  "    ",
                  "    tests[\"****** SEND ACCESS CODE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + file.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/sendaccesscode",
            "description": "This sends an access code (via email for this release) to the user email address given."
          },
          "response": [
            {
              "id": "d129cd1d-0645-6838-aa49-0c524f1d0211",
              "name": "sendaccesscode ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/sendaccesscode"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        }
      ]
    },
    {
      "_postman_id": "709c5bf6-0429-1661-f518-943a32100bf8",
      "name": "Send Access Code Only",
      "description": "Uses Login.csv file to send an access code. This folder ONLY sends 6 digit access code to the users in the Login.csv file",
      "item": [
        {
          "_postman_id": "d5492ed8-22ac-44bf-5a7f-ba322e0d3dde",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "6e32e03a-f5f9-0cc7-af43-9339b387f8b3",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:56:50 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:56:50 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "77",
              "body": "{\"result\":\"0\",\"key1id\":\"e5961c5cf130475a94aeb0afad22e902\",\"key1salt\":\"7077a292b5e0fbb71aa9f69746aa73f948c0e9aebc8b0879ee52f73a8af6f31d\",\"key1iv\":\"7ab1423ede594c1eed5f3e8a660f11e1\",\"key1phrase\":\"6c2f111ccad94fcdbb859416e759a4c7\",\"key2id\":\"de3796656a034f5f9d47f83c5e7f066e\",\"key2salt\":\"93c89c2671915b621a31600e263ec9ae0f99928cd5555f22e5e6729b60b06474\",\"key2iv\":\"56c1f165d869d9cf585b930f1ad2fd3c\",\"key2phrase\":\"8d74033209854dcb8913a61a03dcc0b3\"}"
            }
          ]
        },
        {
          "_postman_id": "001be4af-220d-4339-80e9-df3a83cbf32a",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "56cb3675-a66e-231f-4503-468ba6ebf55c",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(\"Login Scope: \" + jsonData.scopename);",
                  "    console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"sendaccesscodeEncrypt\");  ",
                  "",
                  "}"
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}\n"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "0f43be36-1477-a6a5-0930-3b3dd4054591",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}\n"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "b88d4e9e-b865-7e1d-1213-08f19939a7eb",
          "name": "sendaccesscodeEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** SEND ACCESS CODE ENCRYPT FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Send Access Code encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"sendaccesscode\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n   \"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "843e4477-e67e-9ac6-d438-ee3aa4e21a47",
          "name": "sendaccesscode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Send Access Code success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Success\");",
                  "    postman.setNextRequest(null);  ",
                  "    ",
                  "}else{",
                  "",
                  "    tests[data.testcase + \" ****** SEND ACCESS CODE FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"Test Case:\" + file.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/sendaccesscode",
            "description": "This sends an access code (via email for this release) to the user email address given."
          },
          "response": [
            {
              "id": "a226b2e3-6bca-97c3-f2fa-8f95275ea98a",
              "name": "sendaccesscode ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/sendaccesscode"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        }
      ]
    },
    {
      "_postman_id": "a86535b6-f9b2-2f3e-15f6-24dfd3e8bd50",
      "name": "Verify Access Code",
      "description": "Uses VerifyAccessCode.csv file to verify the 6 digit access code for multiple users in the csv file.",
      "item": [
        {
          "_postman_id": "bde8f6ec-26a5-49d8-6506-7f724a1ed71a",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"test/loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "37498c2e-01ee-0d39-b9be-4022e1df4f60",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:56:43 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:56:43 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "82",
              "body": "{\"result\":\"0\",\"key1id\":\"4030e3ef38a5442f99e2a54c0057c4d8\",\"key1salt\":\"815ba91275002401b9cba3b4b108faaa4434645f8f796b10c248620b7f53e6ec\",\"key1iv\":\"bd313398aa9cb10787d5b014d113b08f\",\"key1phrase\":\"a333fcf959d747d5817b6c2bab2a9506\",\"key2id\":\"285e1999f84548be96891a07261a68bc\",\"key2salt\":\"4a170acb6f91fbd727cbf7e5877ae990f9c4d6befb9e3db37aefc9d97646f6c4\",\"key2iv\":\"9481dd11de52eb350addeaf0f8f62534\",\"key2phrase\":\"e48806c4c84e41adb412e40c454c0544\"}"
            }
          ]
        },
        {
          "_postman_id": "d2f4fd81-c19b-ee0e-8c05-c73197ce3037",
          "name": "test/loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "08f51644-9b6d-3866-db0f-73adbc3edb45",
          "name": "test/memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN REQUEST FAILED ******\"] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage); ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Login Scope: \" + jsonData.scopename);",
                  "    console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"test/verifyaccesscodeEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "522843c4-6afc-e28a-38fa-0f68c75f2326",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "67d5921c-5f71-3c8f-24e9-fcf0d1a9c7a2",
          "name": "test/verifyaccesscodeEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** VERIFY ACCESS CODE ENCRYPT FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Verify Access Code encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/verifyaccesscode\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"accesscode\\\":\\\"{{accesscode}}\\\",\\\"Ekey2id\\\":\\\"{{key2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "55b44c71-00e1-2454-b576-5fdb04b0b705",
          "name": "test/verifyaccesscode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Verify Access Code success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Verify Access Code Success\");",
                  "    postman.setNextRequest(\"loginEncrypt2\");  ",
                  "    ",
                  "}else{",
                  "    ",
                  "    tests[\"****** VERIFY ACCESS CODE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/verifyaccesscode",
            "description": "This sends an access code (via email for this release) to the user email address given."
          },
          "response": [
            {
              "id": "be59aff7-16a0-7204-f818-73f5939e1088",
              "name": "verifyaccesscode",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/verifyaccesscode"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "056a447c-2f19-9065-7909-f530ea0fecca",
          "name": "memberlogin2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN REQUEST FAILED ******\"] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage); ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Login Scope: \" + jsonData.scopename);",
                  "    console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(null);  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": []
        },
        {
          "_postman_id": "dcc6be64-fcd4-dcc4-9efd-af5f5df06afe",
          "name": "loginEncrypt2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin2\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "30f371ff-0a28-5b27-b0cd-9d34cf2ee5a6",
      "name": "Update Mem Auth Entry",
      "description": "Uses MemAuthEntry.csv file to go through all steps of authentication for multiple users. It will then login with the user to show the new (if authenticated) scope.",
      "item": [
        {
          "_postman_id": "6a3304ee-d928-b155-8e6c-ee6327cb1462",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"test/loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "02081b79-9bc0-b4aa-bfc2-2a7e07ab2119",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:56:35 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:56:35 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "92",
              "body": "{\"result\":\"0\",\"key1id\":\"58e05da708c040199fe33ce9fb3f013b\",\"key1salt\":\"0890f236a54872079b3b38370ea572122af68d66f19d0943a9150c098a943036\",\"key1iv\":\"0e94f0cbe60a7b6836b50ac447e8b2e6\",\"key1phrase\":\"d47046428a794b7095ed6d08b52ad8d6\",\"key2id\":\"c15a957348fa40da87251a85657c32a3\",\"key2salt\":\"f97e1c4f1df7114078cffeb50c44b28d9b833ffae75b530f0b540784e50ea9aa\",\"key2iv\":\"44ee94139372df902ad12e4027b140bb\",\"key2phrase\":\"372f698d2f59461ab448fb78c34c6f0f\"}"
            }
          ]
        },
        {
          "_postman_id": "863d3595-1b39-ab1d-379a-9e9ef79b2110",
          "name": "test/loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "bab2ef80-8cde-e3b8-1990-1ba76a749775",
          "name": "test/memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN REQUEST FAILED ******\"] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage); ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Login Scope: \" + jsonData.scopename);",
                  "    console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"test/updatememauthEncrypt1\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "441537c8-ff5e-e6e5-5eae-45258e0104c0",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "89d5d6a5-2b49-0e86-e4f8-ebd1faf9b065",
          "name": "test/updatememauthEncrypt1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** UPDATE MEM AUTH ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Update Mem Auth encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/updatememauthinfo1\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"fname\\\":\\\"{{fname}}\\\",\\\"lname\\\":\\\"{{lname}}\\\",\\\"dob\\\":\\\"{{dob}}\\\",\\\"email\\\":\\\"{{email}}\\\",\\\"mobile\\\":\\\"{{mobile}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "21b461a8-dabd-11e8-6ab4-b71e2273d177",
          "name": "test/updatememauthinfo1",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Mem Auth Entry Step 1 success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Success\");",
                  "    postman.setNextRequest(\"test/updatememauthEncrypt2\");  ",
                  "    ",
                  "}else{",
                  "    ",
                  "    tests[\"****** MEM AUTH ENTRY STEP 1FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/updatememauthinfo",
            "description": "Updates the Member's Authentication information in the two Authentication steps which include Member Info (no ssn)"
          },
          "response": [
            {
              "id": "9053a876-d713-9a12-7105-48a48f0f3ab4",
              "name": "updatememauthinfo ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/updatememauthinfo"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "292d185b-b7af-609d-1534-7e79336b1348",
          "name": "test/updatememauthEncrypt2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** UPDATE MEM AUTH STEP 2 ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Update Mem Auth Step 2 encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/updatememauthinfo2\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"memberid\\\":\\\"{{memberid}}\\\",\\\"suffix\\\":\\\"{{suffix}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "17edc556-b13a-cc1e-9dd6-25d1bf556995",
          "name": "test/updatememauthinfo2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Mem Auth Entry Step 2 success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Success\");",
                  "    postman.setNextRequest(\"getmemauthinfoEncrypt\");  ",
                  "    ",
                  "}else{",
                  "    ",
                  "    tests[data.testcase + \" ****** MEM AUTH ENTRY STEP 2 FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/updatememauthinfo",
            "description": "Updates the Member's Authentication information in the two Authentication steps which include Member Info (no ssn)"
          },
          "response": [
            {
              "id": "ebf61c55-01b7-ed57-a381-d9ec5297b8b2",
              "name": "updatememauthinfo ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/updatememauthinfo"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "5a96b260-b42c-9ee4-4b75-b45310e96c33",
          "name": "getmemauthinfoEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** UPDATE MEM AUTH STEP 2 ENCRYPT FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"get mem auth info encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getmemauthinfo\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n   \"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "7e42e863-0dfb-8810-b51c-871dcb396ed9",
          "name": "getmemauthinfo",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMAUTHINFO FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemauthinfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "    postman.setNextRequest(\"memauthinfoDecrypt\");      ",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/getmemauthinfo",
            "description": "Retrieves the Member Authentication information given by this user (via updatememauthinfo)"
          },
          "response": [
            {
              "id": "1649af60-a59b-39d6-1a1a-3044ea174925",
              "name": "getmemauthinfo ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/getmemauthinfo"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"ROWSET\": {\n        \"ROWS\": {\n            \"lastName\": \"FASIFITLIETTECDE\",\n            \"lastAuthResult\": \"0,\",\n            \"recCreateTS\": \"06-OCT-17 05.53.06.795115 AM\",\n            \"DOB\": \"01/22/1989\",\n            \"memNum\": \"XXH008302462\",\n            \"userID\": \"bdtest10061051@test.com\",\n            \"authAttemptCnt\": 1,\n            \"mobilePhone\": 6172468219,\n            \"authAllowed\": true,\n            \"recUpdateTS\": \"06-OCT-17 06.25.11.417625 AM\",\n            \"firstName\": \"BRIAN\",\n            \"rowNum\": 1,\n            \"emailAdd\": \"myotherEmail@test.com\",\n            \"memSuffix\": 11\n        },\n        \"totRows\": 1\n    }\n}"
            }
          ]
        },
        {
          "_postman_id": "a51c0d1b-17c2-ae4a-fe46-a85c71fd093f",
          "name": "memauthinfoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMAUTHINFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemauthinfo decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    postman.setNextRequest(\"authwithssnEncrypt\");  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "afc9b841-c7a4-ba9e-c607-ca74ea332ba4",
          "name": "test/authwithssnEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** AUTH WITH SSN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Auth with SSSN encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/authwithssn\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"ssn\\\":\\\"{{ssn}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "e492d097-369b-bc4c-473a-434f87cc3678",
          "name": "test/authwithssn",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Auth with SSN success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Success\");",
                  "    postman.setNextRequest(\"test/login2Encrypt\");  ",
                  "    ",
                  "}else{",
                  "    ",
                  "    tests[data.testcase + \" ****** AUTH WITH SSN FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/authwithssn",
            "description": ""
          },
          "response": [
            {
              "id": "29b161fa-2a6e-51a7-0f96-7be2c4fe54ce",
              "name": "authwithssn ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/registration/authwithssn"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "9b659a6b-6f06-ab20-3923-0fea7ff5ca1f",
          "name": "test/login2Encrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"test/memberlogin2\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "b6fd7ab8-fb14-545e-13a9-d9f7aec254af",
          "name": "test/memberlogin2",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage); ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Login Scope: \" + jsonData.scopename);",
                  "    console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"sendaccesscodeEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": []
        },
        {
          "_postman_id": "1535e4cc-7a6a-9e73-a949-5c17f5c97fbe",
          "name": "sendaccesscodeEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** SEND ACCESS CODE ENCRYPT FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Send Access Code encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"sendaccesscode\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n   \"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n   \"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "4e78c5ea-b1e6-b1ed-53ec-fb006999b749",
          "name": "sendaccesscode",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Send Access Code success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \" Success\");",
                  "    postman.setNextRequest(null);  ",
                  "    ",
                  "}else{",
                  "",
                  "    tests[data.testcase + \" ****** SEND ACCESS CODE FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"Test Case:\" + file.testcase + \" ***FAILED***\");",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);  ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/registration/sendaccesscode",
            "description": "This sends an access code (via email for this release) to the user email address given."
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "37ca0915-68b8-a198-803a-e0c00e87e4a7",
      "name": "Mem Info",
      "description": "Uses LoginAV.csv to runs through all the /member/v1/info apis. Open the Postman Console (View>Show Postman Console) before running to see the decrypted response from each api.\n",
      "item": [
        {
          "_postman_id": "eacde2d5-badd-058a-f42c-f6ba3f98f18b",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "9f764b34-2ed1-bc0e-29ad-0a8c1254f106",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:56:27 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:56:27 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "85",
              "body": "{\"result\":\"0\",\"key1id\":\"0aeff4a972b6432da6130ab0da991d39\",\"key1salt\":\"93bcb955bf9ac9692d427391838dff66fa1bd4e743a7caa7ce40497e22f2ee96\",\"key1iv\":\"32460ed174fba3a3e3269e75ecc89e06\",\"key1phrase\":\"74adc8e73f7f40eba648084a67ffb2f9\",\"key2id\":\"c572145ee4b54402abc53ee7a1524566\",\"key2salt\":\"ee10b914b38c96fc54720554d15137afdd1f356f5a1f2dbb1be243515798f707\",\"key2iv\":\"765f2f13f001335ed4addcc525fb6f2c\",\"key2phrase\":\"82246af67f12427e9e4c47aaa894bd10\"}"
            }
          ]
        },
        {
          "_postman_id": "d4e38204-d5be-6ee9-ecc8-a0c12b7f932b",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "d70dc569-6b0e-654e-d678-1b525fe00bb5",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(data.userid + \" Login Scope: \" + jsonData.scopename);",
                  "    //console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"meminfoEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}\n"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "9b942e12-d6e6-40cb-680f-cf4d61aa48d0",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}\n"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "03deaa1c-563b-59c6-2b64-8748d57c58dd",
          "name": "meminfoEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** MEMINFO ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Information encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getcardfront\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "4c9646b6-b3e9-5a84-bb79-3187a8ca00ed",
          "name": "getcardfront",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getcardback\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCARDFRONT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getcardfront success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "    ",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getcardback\");",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getcardfront",
            "description": ""
          },
          "response": [
            {
              "id": "7d186cae-b715-66fc-32f0-29eb49148f0b",
              "name": "getcardfront ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/info/getcardfront"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"ROWSET\": {\n        \"ROWS\": {\n            \"PCPPh\": \"978-269-0030\",\n            \"nurseLine\": \"1-888-247-2583\",\n            \"RowNum\": 1,\n            \"CopayInfo\": \"Refer to your explanation of benefits or go to bluecrossma.com and select Review My Benefits for service level copayment information.\",\n            \"isDependent\": false,\n            \"hasHEQ\": false,\n            \"hasALG\": false,\n            \"BHCopay\": 15,\n            \"dispSuitcase\": true,\n            \"PCPState\": \"MA\",\n            \"rxBin\": \"RxBin: 003858 PCN: A4\",\n            \"PCPZip\": 1810,\n            \"MemName\": \"BRIAN TTECDE\",\n            \"ERCopay\": 50,\n            \"MemServPh\": \"1-800-238-6616\",\n            \"PCPSpecified\": true,\n            \"PCPStreet\": \"140 HAVERHILL ST\",\n            \"cardMemID\": \"XXH99902462\",\n            \"ProdDesc\": \"BLUE CHOICE PLAN 2\",\n            \"OvCopay\": \"20/15\",\n            \"hasFAD\": true,\n            \"PCPName\": \"PRATHIMA CHALOORI\",\n            \"rxSpecified\": true,\n            \"addressStr\": \"140 HAVERHILL ST, ANDOVER MA 01810\",\n            \"PCPCity\": \"ANDOVER\",\n            \"FADNetID\": 311005011,\n            \"rxGRP\": \"RxGRP: MASA\",\n            \"PrevCopay\": 0,\n            \"hasDependents\": false,\n            \"MemSuff\": 11\n        },\n        \"totRows\": 1\n    }\n}"
            }
          ]
        },
        {
          "_postman_id": "98b43aa1-8466-2be7-7dcb-3bdf96ad9f38",
          "name": "getcardback",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getrecentvisits\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCARDBACK FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getcardback success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getrecentvisits\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getcardback",
            "description": ""
          },
          "response": [
            {
              "id": "25d48a6c-6d5c-c725-78b7-7deea19e93e4",
              "name": "getcardback",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/info/getcardback"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"PCPPh\":\"978-269-0030\",\n         \"nurseLine\":\"1-888-247-2583\",\n         \"RowNum\":1,\n         \"CopayInfo\":\"Refer to your explanation of benefits or go to bluecrossma.com and select Review My Benefits for service level copayment information.\",\n         \"isDependent\":false,\n         \"hasHEQ\":false,\n         \"hasALG\":false,\n         \"BHCopay\":15,\n         \"dispSuitcase\":true,\n         \"PCPState\":\"MA\",\n         \"rxBin\":\"RxBin: 003858 PCN: A4\",\n         \"PCPZip\":1810,\n         \"MemName\":\"BRIAN FRIGULIETTECDE\",\n         \"ERCopay\":50,\n         \"MemServPh\":\"1-800-238-6616\",\n         \"PCPSpecified\":true,\n         \"PCPStreet\":\"140 HAVERHILL ST\",\n         \"cardMemID\":\"XXH008302462\",\n         \"ProdDesc\":\"BLUE CHOICE PLAN 2\",\n         \"OvCopay\":\"20/15\",\n         \"hasFAD\":true,\n         \"PCPName\":\"PRATHIMA CHALOORI\",\n         \"rxSpecified\":true,\n         \"addressStr\":\"140 HAVERHILL ST, ANDOVER MA 01810\",\n         \"PCPCity\":\"ANDOVER\",\n         \"FADNetID\":311005011,\n         \"rxGRP\":\"RxGRP: MASA\",\n         \"PrevCopay\":0,\n         \"hasDependents\":false,\n         \"MemSuff\":11\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "9bac9983-0336-4a28-09dc-6587deee93e6",
          "name": "getrecentvisits",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getrecentrx\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETRECENTVISITS FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getrecentvisits success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getrecentrx\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getrecentvisits",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "52787871-3090-089e-a4f4-42dbb9ad21ab",
          "name": "getrecentrx",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getclaims\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETRECENTRX FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getrecentrx success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getclaims\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getrecentrx",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "5f88b665-7e75-d3cc-710c-7fd5fe272a51",
          "name": "getclaims",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getdependentlist\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMS FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaims success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getdependentlist\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getclaims",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e840fece-7cad-3450-4e93-a4672c2d9e9c",
          "name": "getdependentlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getmemberinfo\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPENDENTLIST FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdependentlist success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getmemberinfo\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getdependentlist",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "a69b49da-d29b-f1db-99ed-918bfd87381b",
          "name": "getmemberinfo",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getlimitedplaninfo\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMBERINFO FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemberinfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmemberinfo",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "bbb4190d-e999-b4d5-04f9-aa855d18b179",
          "name": "getlimitedplaninfo",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getmemprofile\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETLIMITEDPLANINFO FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getlimitedplaninfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getlimitedplaninfo",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "4ee72ac0-6180-1d90-4c92-04e97b5d80f6",
          "name": "getmemprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getmempreference\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMPROFILE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemprofile success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmemprofile",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "cb39037a-d882-e4d5-4b80-75cc91dd0409",
          "name": "getmempreference",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMPREFERENCE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmempreference success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(null);  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmempreference",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "952690a3-c501-f9a3-368b-c12229961d8b",
          "name": "infoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** MEM INFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Info decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    var theNextRequest = pm.environment.get(\"nextRequest\");",
                  "    ",
                  "",
                  "    postman.setNextRequest(theNextRequest);  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "1ef1ec8d-7fd8-bb03-d830-a1d547f1d06a",
      "name": "Claims Info",
      "description": "Uses LoginAV.csv to runs through all the /member/v1/claimsinfo apis. Open the Postman Console (View>Show Postman Console) before running to see the decrypted response from each api.\n",
      "item": [
        {
          "_postman_id": "f3083333-e942-09c0-b45d-6c2f1e897fc0",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "3b93deb9-ca03-efe6-3d71-c271f176db82",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:56:18 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:56:18 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "88",
              "body": "{\"result\":\"0\",\"key1id\":\"39cad102eb9b4d71b443de8bee422e83\",\"key1salt\":\"b082c136e0f48738a395951cd37f180b1e48b57977e94c61e47295dd94b34e99\",\"key1iv\":\"95f2802e36c7fc2950ae6f25c08f4009\",\"key1phrase\":\"3c74ec82f62b458890cb8ddfefa0a9c2\",\"key2id\":\"7c98994e219a493492b4024ad687b67c\",\"key2salt\":\"ecb626b2defa89e122617ac9a3c5babac066ca20d59bc68befe5d0f7876d2894\",\"key2iv\":\"026a272ff6f87e02657bf9873ec1979e\",\"key2phrase\":\"969edb6a28e14a238382570c8908ef2c\"}"
            }
          ]
        },
        {
          "_postman_id": "18fe3efb-7a42-0f61-849a-268aa189cde1",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "9fd629df-44a5-5f12-2bd5-eb9bee5d7ff6",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "   // console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(data.userid + \" Login Scope: \" + jsonData.scopename);",
                  "    //console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"getclaimsEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "480e470c-08c5-b011-bccc-fa9ce4c601dc",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "771ab323-7ea0-1339-4822-76e4aef2d48b",
          "name": "getclaimsEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMS ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getclaims\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "8a6d9fe8-9e94-cb88-1e0f-f64a3e217691",
          "name": "getclaims",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getclaimsfordaterangeEncrypt\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMS FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.displaymessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaims success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaims",
            "description": ""
          },
          "response": [
            {
              "id": "227423fa-dad2-9432-32d2-3ea917c920fd",
              "name": "getclaims ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaims"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":[\n         {\n            \"lastDOS\":\"03/01/2017\",\n            \"provName\":\"CVS\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"03/01/2017\",\n            \"intClmNum\":941703011131691,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Pharmacy\",\n            \"youOweAmt\":-3.3,\n            \"prescribingProvName\":\"ERIC M WEIL MD\",\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"03/01/2017\",\n            \"billedAmt\":-9.74\n         },\n         {\n            \"lastDOS\":\"01/17/2017\",\n            \"provName\":\"PAUL S GAMBER JR PC\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"01/17/2017\",\n            \"intClmNum\":36170190186200,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Dental\",\n            \"youOweAmt\":0,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"01/17/2017\",\n            \"billedAmt\":148\n         },\n         {\n            \"lastDOS\":\"11/23/2016\",\n            \"provName\":\"ORTHOCARE MEDICALEQUIPMENT LLC\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"11/23/2016\",\n            \"intClmNum\":26163420861100,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Medical\",\n            \"youOweAmt\":17.5,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"11/23/2016\",\n            \"billedAmt\":329.34\n         },\n         {\n            \"lastDOS\":\"10/04/2016\",\n            \"provName\":\"THE GENERAL HOSPITAL CORPORATION DBA\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"10/04/2016\",\n            \"intClmNum\":20162840657102,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Medical\",\n            \"youOweAmt\":0,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"10/04/2016\",\n            \"billedAmt\":693\n         },\n         {\n            \"lastDOS\":\"07/23/2016\",\n            \"provName\":\"CVS\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"07/23/2016\",\n            \"intClmNum\":941607231020935,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Pharmacy\",\n            \"youOweAmt\":15,\n            \"prescribingProvName\":\"HARSHA V GOPAL MD\",\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"07/23/2016\",\n            \"billedAmt\":92.74\n         },\n         {\n            \"lastDOS\":\"12/21/2015\",\n            \"provName\":\"NORTHEAST HOSPITALCORPORATION\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"12/21/2015\",\n            \"intClmNum\":20160080161000,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Medical\",\n            \"youOweAmt\":20,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"12/21/2015\",\n            \"billedAmt\":188\n         },\n         {\n            \"lastDOS\":\"12/09/2015\",\n            \"provName\":\"VERNICK AND GOPALLLC\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"12/09/2015\",\n            \"intClmNum\":26153490527900,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Medical\",\n            \"youOweAmt\":0,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"12/09/2015\",\n            \"billedAmt\":325\n         },\n         {\n            \"lastDOS\":\"09/28/2015\",\n            \"provName\":\"THE GENERAL HOSPITAL CORPORATION DBA\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"09/28/2015\",\n            \"intClmNum\":20152780457000,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Medical\",\n            \"youOweAmt\":0,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"09/28/2015\",\n            \"billedAmt\":218\n         }\n      ],\n      \"totRows\":8\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "64c44e92-a363-0259-5765-41b9987fa430",
          "name": "getclaimsfordaterangeEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMSFORDATERANGE ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsfordaterangeEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getclaimsfordaterange\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"param1\\\":\\\"01/01/2017\\\",\\\"param2\\\":\\\"12/31/2017\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "26215032-49f3-a280-a368-ab93ec3c4366",
          "name": "getclaimsfordaterange",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getclaimsforICNEncrypt\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMSFORDATERANGE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.displaymessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsfordaterange success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaimsfordaterange",
            "description": ""
          },
          "response": [
            {
              "id": "93a6f17a-2d2d-da09-bb4e-c922bfea0bb4",
              "name": "getclaimsfordaterange ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaimsfordaterange"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":[\n         {\n            \"lastDOS\":\"05/03/2017\",\n            \"provName\":\"THE GENERAL HOSPITAL CORPORATION DBA\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"05/03/2017\",\n            \"intClmNum\":20171292407200,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Medical\",\n            \"youOweAmt\":0,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"05/03/2017\",\n            \"billedAmt\":245\n         },\n         {\n            \"lastDOS\":\"03/01/2017\",\n            \"provName\":\"CVS\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"03/01/2017\",\n            \"intClmNum\":941703011131691,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Pharmacy\",\n            \"youOweAmt\":-3.3,\n            \"prescribingProvName\":\"ERIC M WEIL MD\",\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"03/01/2017\",\n            \"billedAmt\":-9.74\n         },\n         {\n            \"lastDOS\":\"01/17/2017\",\n            \"provName\":\"PAUL S GAMBER JR PC\",\n            \"isDependent\":false,\n            \"clm_paymt_stat\":\"Paid\",\n            \"clmStatus\":\"Complete\",\n            \"firstDOS\":\"01/17/2017\",\n            \"intClmNum\":36170190186200,\n            \"subNum\":\"0083024620000\",\n            \"memFName\":\"Brian\",\n            \"memNum\":\"0083024620000011\",\n            \"memDOB\":\"01/22/1989\",\n            \"svcType\":\"Dental\",\n            \"youOweAmt\":0,\n            \"memLName\":\"Friguliettecde\",\n            \"DOS\":\"01/17/2017\",\n            \"billedAmt\":148\n         }\n      ],\n      \"totRows\":3\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "8fbf9e9c-fa66-839e-e0d0-7c1ee5a7d54c",
          "name": "getclaimsforICNEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMSFORICN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase + \"ICN: \"+ data.clmICN);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsforICNEncrypt success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \"ICN: \"+ data.clmICN);",
                  "    ",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getclaimsforICN\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"param1\\\":\\\"{{clmICN}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "7a395008-b0cf-6829-23f3-c795dbbe3437",
          "name": "getclaimsforICN",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getclaimsforproviderEncrypt\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMSFORICN FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.displaymessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsforICN success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaimsforICN",
            "description": ""
          },
          "response": [
            {
              "id": "740a5edc-184f-f3ec-4144-001152b61e71",
              "name": "getclaimsforICN ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaimsforICN"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"alldAmt\":146.63,\n         \"coinsAmt\":0,\n         \"notCovAmt\":0,\n         \"provName\":\"VERNICK AND GOPALLLC\",\n         \"RowNum\":1,\n         \"copayAmt\":0,\n         \"clmStatus\":\"Complete\",\n         \"paidAmt\":146.63,\n         \"recDt\":\"12/14/2015\",\n         \"intClmNum\":26153490527900,\n         \"serviceType\":\"Medical\",\n         \"subNum\":\"0015880090000\",\n         \"msgSpecified\":true,\n         \"memFName\":\"Sadegh\",\n         \"memNum\":\"0015880090000000\",\n         \"svcType\":\"Technical Component\",\n         \"youOweAmt\":0,\n         \"prvSubAmt\":325,\n         \"statusDt\":\"12/15/2015\",\n         \"dedAmt\":0,\n         \"clmPaymtStatus\":\"Paid\",\n         \"DOS\":\"12/09/2015\",\n         \"lineMsg\":\"BENEFITS FOR THIS SERVICE ARE BASED ON A FEE SCHEDULE AND THE MAXIMUM REIMBURSABLE ALLOWANCE FOR THIS BENEFIT HAS BEEN PROVIDED. YOU ARE ONLY RESPONSIBLE FOR ANY COINSURANCE, DEDUCTIBLE ORCOPAYMENT. /P017/\"\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "d3f84d48-1d09-148a-fc26-a8349d86f01d",
          "name": "getclaimsforproviderEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMSFORPROVIDER ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase + \"Provider: \" + data.clmProv);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsforproviderEncrypt success\"] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase + \"Provider: \" + data.clmProv);",
                  "    ",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getclaimsforprovider\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"param1\\\":\\\"{{clmProv}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "6ef2048a-eee1-1ee4-b2dc-8f913ea5bc2c",
          "name": "getclaimsforprovider",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMSFORPROVIDER FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.displaymessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsforprovider success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaimsforprovider",
            "description": ""
          },
          "response": [
            {
              "id": "80702d06-f404-6dac-af8b-07d402f5e798",
              "name": "getclaimsforprovider ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/claimsinfo/getclaimsforprovider"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"lastDOS\":\"12/09/2015\",\n         \"provName\":\"VERNICK AND GOPALLLC\",\n         \"isDependent\":false,\n         \"clm_paymt_stat\":\"Paid\",\n         \"clmStatus\":\"Complete\",\n         \"firstDOS\":\"12/09/2015\",\n         \"intClmNum\":26153490527900,\n         \"subNum\":\"0015880090000\",\n         \"memFName\":\"Sadegh\",\n         \"memNum\":\"0015880090000000\",\n         \"memDOB\":\"09/10/1987\",\n         \"svcType\":\"Medical\",\n         \"youOweAmt\":0,\n         \"memLName\":\"Dabiricde\",\n         \"DOS\":\"12/09/2015\",\n         \"billedAmt\":325\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "48dc9781-3a67-5884-2f40-32a9941df670",
          "name": "infoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** MEM INFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Info decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    var theNextRequest = pm.environment.get(\"nextRequest\");",
                  "    ",
                  "",
                  "    postman.setNextRequest(theNextRequest);  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "b14eff70-10d0-cde3-1e32-8f2c257c5b8d",
      "name": "Depclaims Info",
      "description": "Uses LoginAV.csv to run through all the /member/v1/depclaimsinfo apis. Open the Postman Console (View>Show Postman Console) before running to see the decrypted response from each api.\n",
      "item": [
        {
          "_postman_id": "1ac7e3ba-c93e-9500-8e54-f3711fc411f1",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "418196f1-d292-fa4b-d905-ae6ef7030865",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:56:09 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:56:08 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "147",
              "body": "{\"result\":\"0\",\"key1id\":\"a915f8ea71b94466bec5c25af5c288e6\",\"key1salt\":\"65e6b8eda2dcbc12ef0dc492a5342e0048ee2658c4d544af437d938de661708c\",\"key1iv\":\"204586a98026ca3299a916e7d20bc14c\",\"key1phrase\":\"e90fbc420ed6442cb83afd5c599ba9ae\",\"key2id\":\"456fc7c620e94d159311a836534e6b13\",\"key2salt\":\"4c25f5b11ee32875dc0bddd9935ae41bd769fc62311abf215b30f9f4375cf320\",\"key2iv\":\"847d3d6b71e70546c6da0077e02940dc\",\"key2phrase\":\"d4592db1de0a4da19e71e8a67e990ad1\"}"
            }
          ]
        },
        {
          "_postman_id": "3596a70b-a946-4aff-406e-f482b2ed2746",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "2bf8c49a-c20d-97a7-ea8e-947d1e10a1a0",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(data.userid + \" Login Scope: \" + jsonData.scopename);",
                  "    //console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"getdepclaimsEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "69460acb-5af6-1b12-6a66-30bb3dbfacf4",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "27ef4bf4-fdef-096f-9650-50a51e639a6b",
          "name": "getdepclaimsEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMS ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdepclaimsEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getdepclaims\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"depid\\\":\\\"123456789\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "5b9754a9-87c9-46ec-aace-c4ce84e64ddd",
          "name": "getdepclaims",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getdepclaimsfordaterangeEncrypt\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMS FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdepclaims success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaims",
            "description": ""
          },
          "response": [
            {
              "id": "c437431d-fcde-6ff1-f450-abde626f3cac",
              "name": "getdepclaims ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaims"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"lastDOS\":\"10/28/2015\",\n         \"provName\":\"LAWRENCE C RUSIN MD\",\n         \"isDependent\":true,\n         \"clm_paymt_stat\":\"Paid\",\n         \"clmStatus\":\"Complete\",\n         \"firstDOS\":\"10/28/2015\",\n         \"intClmNum\":26160740416000,\n         \"subNum\":\"0016703370000\",\n         \"memFName\":\"Ambrose\",\n         \"memNum\":\"0016703370000010\",\n         \"memDOB\":\"08/09/2002\",\n         \"svcType\":\"Medical\",\n         \"youOweAmt\":20,\n         \"memLName\":\"Jeri\",\n         \"DOS\":\"10/28/2015\",\n         \"billedAmt\":178\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "118bb820-8738-443f-dbfa-b20486e42cb5",
          "name": "getdepclaimsfordaterangeEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMSFORDATERANGE ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdepclaimsfordaterangeEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getdepclaimsfordaterange\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"depid\\\":\\\"123456789\\\",\\\"param1\\\":\\\"01/01/2015\\\",\\\"param2\\\":\\\"12/01/2017\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "a6e713ea-218e-ced0-3e46-be010495bb13",
          "name": "getdepclaimsfordaterange",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getdepclaimsforICNEncrypt\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMSFORDATERANGE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdepclaimsfordaterange success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaimsfordaterange",
            "description": ""
          },
          "response": [
            {
              "id": "1162f0ad-20ea-d5f3-d3ea-7fb8cc36494b",
              "name": "getdepclaimsfordaterange ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaimsfordaterange"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"lastDOS\":\"10/28/2015\",\n         \"provName\":\"LAWRENCE C RUSIN MD\",\n         \"isDependent\":true,\n         \"clm_paymt_stat\":\"Paid\",\n         \"clmStatus\":\"Complete\",\n         \"firstDOS\":\"10/28/2015\",\n         \"intClmNum\":26160740416000,\n         \"subNum\":\"0016703370000\",\n         \"memFName\":\"Ambrose\",\n         \"memNum\":\"0016703370000010\",\n         \"memDOB\":\"08/09/2002\",\n         \"svcType\":\"Medical\",\n         \"youOweAmt\":20,\n         \"memLName\":\"Jeri\",\n         \"DOS\":\"10/28/2015\",\n         \"billedAmt\":178\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "11e4421e-a70b-a40d-cf6a-f2375d601ece",
          "name": "getdepclaimsforICNEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMSFORICN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdepclaimsforICNEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getdepclaimsforICN\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"depid\\\":\\\"123456789\\\",\\\"param1\\\":\\\"020161930130300\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "07451156-4712-b9d2-a51e-671e878f58b4",
          "name": "getdepclaimsforICN",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getdepclaimsforproviderEncrypt\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMSFORICN FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemberinfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaimsforICN",
            "description": ""
          },
          "response": [
            {
              "id": "6a5dd044-0623-58b3-23b2-363a78856cba",
              "name": "getdepclaimsforICN ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaimsforICN"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"alldAmt\":76.79,\n         \"coinsAmt\":0,\n         \"notCovAmt\":0,\n         \"provName\":\"LAWRENCE C RUSIN MD\",\n         \"RowNum\":1,\n         \"copayAmt\":20,\n         \"clmStatus\":\"Complete\",\n         \"paidAmt\":56.79,\n         \"recDt\":\"11/01/2015\",\n         \"intClmNum\":26160740416000,\n         \"serviceType\":\"Medical\",\n         \"subNum\":\"0016703370000\",\n         \"msgSpecified\":true,\n         \"memFName\":\"Ambrose\",\n         \"memNum\":\"0016703370000010\",\n         \"svcType\":\"Medical Care\",\n         \"youOweAmt\":20,\n         \"prvSubAmt\":178,\n         \"statusDt\":\"11/02/2015\",\n         \"dedAmt\":0,\n         \"clmPaymtStatus\":\"Paid\",\n         \"DOS\":\"10/28/2015\",\n         \"lineMsg\":\"BENEFITS FOR THIS SERVICE ARE BASED ON A FEE SCHEDULE AND THE MAXIMUM REIMBURSABLE ALLOWANCE FOR THIS BENEFIT HAS BEEN PROVIDED. YOU ARE ONLY RESPONSIBLE FOR ANY COINSURANCE, DEDUCTIBLE ORCOPAYMENT. /P017/\"\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "3a27bfdd-3cfd-9696-7c15-2692e78469c6",
          "name": "getdepclaimsforproviderEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMSFORPROVIDER ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Information encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getdepclaimsforprovider\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\",\\\"depid\\\":\\\"123456789\\\",\\\"param1\\\":\\\"NORTHEAST HOSPITALCORPORATION\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "97c716a7-d513-4773-e399-a556bc69b7d5",
          "name": "getdepclaimsforprovider",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPCLAIMSFORPROVIDER FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemberinfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaimsforprovider",
            "description": ""
          },
          "response": [
            {
              "id": "c221dbc2-ffd9-401a-0e69-6f7769f83b14",
              "name": "getdepclaimsforprovider ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depclaimsinfo/getdepclaimsforprovider"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"lastDOS\":\"10/28/2015\",\n         \"provName\":\"LAWRENCE C RUSIN MD\",\n         \"isDependent\":true,\n         \"clm_paymt_stat\":\"Paid\",\n         \"clmStatus\":\"Complete\",\n         \"firstDOS\":\"10/28/2015\",\n         \"intClmNum\":26160740416000,\n         \"subNum\":\"0016703370000\",\n         \"memFName\":\"Ambrose\",\n         \"memNum\":\"0016703370000010\",\n         \"memDOB\":\"08/09/2002\",\n         \"svcType\":\"Medical\",\n         \"youOweAmt\":20,\n         \"memLName\":\"Jeri\",\n         \"DOS\":\"10/28/2015\",\n         \"billedAmt\":178\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "ff7aa699-a228-9a10-5165-72dcb24daa34",
          "name": "infoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** MEM INFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Info decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    var theNextRequest = pm.environment.get(\"nextRequest\");",
                  "    ",
                  "",
                  "    postman.setNextRequest(theNextRequest);  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "053b7c42-7b60-a45f-fc2c-5b5597456ce9",
      "name": "Dep Info",
      "description": "Uses LoginAV.csv to run through all the /member/v1/depinfo apis. Open the Postman Console (View>Show Postman Console) before running to see the decrypted response from each api.\n",
      "item": [
        {
          "_postman_id": "e6fe6b0f-e361-bc99-e96b-5011809ca3be",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "36769c83-aafa-82f3-b1bf-c1006079e225",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:55:58 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:55:58 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "84",
              "body": "{\"result\":\"0\",\"key1id\":\"96771f6dbf9d428184fd5606f7a39838\",\"key1salt\":\"7a5572bb309843250d33337c4888d6dfe69b0c4b4bf83c97803bdb3ef2d7612b\",\"key1iv\":\"7abf55dd2fd694d09c667ccb436e220e\",\"key1phrase\":\"166a10c265db4bf9a810fa60289231f3\",\"key2id\":\"ffc35df8860849b09f6975a94a881f9a\",\"key2salt\":\"b025a6d0a3321555dd058fa5c13896cbace1ee0efd6ff5b2a2a9f1f7b7123525\",\"key2iv\":\"78cbb33a89b973de99679045013ad7f8\",\"key2phrase\":\"82d8ae07acbf4500b1fe2c7c143370cc\"}"
            }
          ]
        },
        {
          "_postman_id": "e9fdb2d7-9317-4e87-de50-7576c786e583",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "5b47dfe3-5c6e-06a6-99fa-0661f7ee74ed",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(data.userid + \" Login Scope: \" + jsonData.scopename);",
                  "    //console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"depmeminfoEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}\n"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "85d187ec-5ec0-7491-7ba3-39be336c7f8d",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}\n"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "ad79b146-b912-a49a-ad1f-faedee704066",
          "name": "depmeminfoEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** MEMINFO ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Information encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getcardfront\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "0f8d1a54-28b8-390e-f7db-7785b74ef81d",
          "name": "getcardfront",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getcardback\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCARDFRONT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getcardfront success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "    ",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getcardback\");",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getcardfront",
            "description": ""
          },
          "response": [
            {
              "id": "1bf3ad42-180a-8644-688c-e11fb1161f91",
              "name": "getdepcardfront ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depinfo/getdepcardfront"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"PCPPh\":\"978-287-9300\",\n         \"nurseLine\":\"1-888-247-2583\",\n         \"RowNum\":1,\n         \"CopayInfo\":\"Refer to your explanation of benefits or go to bluecrossma.com and select Review My Benefits for service level copayment information.\",\n         \"isDependent\":true,\n         \"hasHEQ\":false,\n         \"hasALG\":false,\n         \"BHCopay\":25,\n         \"dispSuitcase\":true,\n         \"PCPState\":\"MA\",\n         \"rxBin\":\"RxBin: 003858 PCN: A4\",\n         \"PCPZip\":1742,\n         \"MemName\":\"AMBROSE JERI\",\n         \"ERCopay\":100,\n         \"MemServPh\":\"1-800-238-6616\",\n         \"PCPSpecified\":true,\n         \"PCPStreet\":\"330 BAKER AVE\",\n         \"cardMemID\":\"XXH001670337\",\n         \"ProdDesc\":\"BLUE CHOICE PLAN 2\",\n         \"OvCopay\":25,\n         \"hasFAD\":true,\n         \"PCPName\":\"ANTHONY LOPEZ\",\n         \"rxSpecified\":true,\n         \"addressStr\":\"330 BAKER AVE, CONCORD MA 01742\",\n         \"PCPCity\":\"CONCORD\",\n         \"FADNetID\":311005011,\n         \"rxGRP\":\"RxGRP: MASA\",\n         \"PrevCopay\":0,\n         \"hasDependents\":false,\n         \"MemSuff\":10\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "09ac39d5-2dad-5a21-230b-84d284500db9",
          "name": "getcardback",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getrecentvisits\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCARDBACK FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getcardback success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getrecentvisits\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getcardback",
            "description": ""
          },
          "response": [
            {
              "id": "9d51186f-f86c-2712-b68a-a59331236803",
              "name": "getdepcardback ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depinfo/getdepcardback"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":[\n         {\n            \"RowNum\":1,\n            \"CopyLoc\":\"Top\",\n            \"Copy\":\"www.bluecrossma.com\"\n         },\n         {\n            \"RowNum\":2,\n            \"CopyLoc\":\"Para1\",\n            \"Copy\":\"Routine or Urgent Care: Contact your PCP. Emergencies: seek emergency care or call 911 or call the local emergency telephone number. Call your PCP within 48 hours.\"\n         },\n         {\n            \"RowNum\":3,\n            \"CopyLoc\":\"Para2\",\n            \"Copy\":\"This card is for identification only. It is not proof of membership, nor does it guarantee coverage.\"\n         },\n         {\n            \"RowNum\":4,\n            \"CopyLoc\":\"Para3\",\n            \"Copy\":\"To the Provider: submit claims to the Blue Cross and/or Blue Shield Plan servicing your area. Be sure to include the three-letter prefix followed by the nine-digit number.\"\n         },\n         {\n            \"RowNum\":5,\n            \"CopyLoc\":\"Para4\",\n            \"Copy\":\"Member Service:1-800-238-6616|Provider Service:1-800-443-6657|Blue Care Line:1-888-247-2583|Behavioral Health & Substance Abuse:1-800-444-2426\"\n         },\n         {\n            \"RowNum\":6,\n            \"CopyLoc\":\"Para5\",\n            \"Copy\":\"Blue Cross and Blue Shield of Massachusetts, Inc., an Independent Licensee of the Blue Cross and Blue Shield Association. administers claims payment only and does not assume financial risk for claims.\"\n         },\n         {\n            \"RowNum\":7,\n            \"CopyLoc\":\"Bottom\",\n            \"Copy\":\"Express Scripts, Inc. Pharmacy benefits administrator\"\n         }\n      ],\n      \"totRows\":7\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "06d78561-faa3-4638-990b-ad8393baeaa5",
          "name": "getrecentvisits",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getrecentrx\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETRECENTVISITS FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getrecentvisits success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getrecentrx\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getrecentvisits",
            "description": ""
          },
          "response": [
            {
              "id": "e7a113b0-1cb1-de8e-0b22-201733679446",
              "name": "getdeprecentvisits ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depinfo/getdeprecentvisits"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":[\n         {\n            \"RowNum\":1,\n            \"PrvState\":\"MA\",\n            \"PrvPh\":\"413-395-7580\",\n            \"IsPCP\":false,\n            \"PrvType\":\"Physician\",\n            \"PrvName\":\"JEFFREY LEPPO MD\",\n            \"PrvSpec\":\"Cardiovascular Disease\",\n            \"PrvCity\":\"Pittsfield\",\n            \"addressStr\":\"41 WACONAH ST, PITTSFIELD MA 01201\",\n            \"DOS\":\"01/12/14\",\n            \"PrvZip\":1201,\n            \"hasAddress\":true,\n            \"PrvStreet\":\"41 Waconah St\"\n         },\n         {\n            \"RowNum\":4,\n            \"PrvState\":\"MA\",\n            \"PrvPh\":\"413-447-2451\",\n            \"IsPCP\":false,\n            \"PrvType\":\"Physician\",\n            \"PrvName\":\"MAZEN GHANI MD\",\n            \"PrvSpec\":\"Radiology\",\n            \"PrvCity\":\"Pittsfield\",\n            \"addressStr\":\"725 NORTH ST, PITTSFIELD MA 01201\",\n            \"DOS\":\"01/12/14\",\n            \"PrvZip\":1201,\n            \"hasAddress\":true,\n            \"PrvStreet\":\"725 North St\"\n         },\n         {\n            \"RowNum\":2,\n            \"PrvState\":\"MA\",\n            \"PrvPh\":\"413-445-4565\",\n            \"IsPCP\":false,\n            \"PrvType\":\"Physician\",\n            \"PrvName\":\"GREGORY D SHOULDICE MD\",\n            \"PrvSpec\":\"Ophthalmology\",\n            \"PrvCity\":\"Pittsfield\",\n            \"addressStr\":\"740 WILLIAMS ST, PITTSFIELD MA 01201\",\n            \"DOS\":\"09/30/13\",\n            \"PrvZip\":1201,\n            \"hasAddress\":true,\n            \"PrvStreet\":\"740 Williams St\"\n         },\n         {\n            \"RowNum\":3,\n            \"PrvState\":\"MA\",\n            \"PrvPh\":\"413-499-2054\",\n            \"IsPCP\":true,\n            \"PrvType\":\"Physician\",\n            \"PrvName\":\"CHRISTOPHER TRANCYNGER MD\",\n            \"PrvSpec\":\"Internal Medicine\",\n            \"PrvCity\":\"Pittsfield\",\n            \"addressStr\":\"631B NORTH ST, PITTSFIELD MA 01201\",\n            \"DOS\":\"07/24/13\",\n            \"PrvZip\":1201,\n            \"hasAddress\":true,\n            \"PrvStreet\":\"631b North St\"\n         },\n         {\n            \"RowNum\":5,\n            \"PrvState\":\"MA\",\n            \"PrvPh\":\"413-447-7622\",\n            \"IsPCP\":false,\n            \"PrvType\":\"Dentist\",\n            \"PrvName\":\"EDWIN J HELITZER DMD\",\n            \"PrvSpec\":\"General Dentist\",\n            \"PrvCity\":\"Pittsfield\",\n            \"addressStr\":\"195 SOUTH ST STE 2, PITTSFIELD MA 01201\",\n            \"DOS\":\"06/07/13\",\n            \"PrvZip\":1201,\n            \"hasAddress\":true,\n            \"PrvStreet\":\"195 South St Ste 2\"\n         }\n      ],\n      \"totRows\":5\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "557339a9-4160-51ed-de43-9311f8f4c69d",
          "name": "getrecentrx",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getclaims\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETRECENTRX FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getrecentrx success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getclaims\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getrecentrx",
            "description": ""
          },
          "response": [
            {
              "id": "1bf8db50-675d-a706-e755-a2207e1fdfa8",
              "name": "getdeprecentrx ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depinfo/getdeprecentrx"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":[\n         {\n            \"DispStreet\":\"1880 Ocean Rd\",\n            \"PrescPh\":\"781-878-5200\",\n            \"RowNum\":4,\n            \"DispName\":\"CVS\",\n            \"QtyDisp\":200,\n            \"DispPh\":\"781-837-5381\",\n            \"GenericName\":\"Amoxicillin (Trihydrate) For Susp 400 Mg/5ml\",\n            \"PrescName\":\"MATTHEW R HJORT MD\",\n            \"DispDt\":\"04/28/15\",\n            \"DispCity\":\"Marshfield\",\n            \"addressStr\":\"1880 OCEAN RD, MARSHFIELD MA 02050\",\n            \"Strength\":\"400 Mg/5ml\",\n            \"DispZip\":2050,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Amoxicillin\"\n         },\n         {\n            \"DispStreet\":\"1880 Ocean Rd\",\n            \"PrescPh\":\"508-941-7400\",\n            \"RowNum\":6,\n            \"DispName\":\"CVS\",\n            \"QtyDisp\":300,\n            \"DispPh\":\"781-837-5381\",\n            \"GenericName\":\"Amoxicillin Clavulanate For Susp 250-62.5 Mg/5ml\",\n            \"PrescName\":\"JAMES J MENSCHING DO\",\n            \"DispDt\":\"02/06/15\",\n            \"DispCity\":\"Marshfield\",\n            \"addressStr\":\"1880 OCEAN RD, MARSHFIELD MA 02050\",\n            \"Strength\":\"250-6\",\n            \"DispZip\":2050,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Amox Tr-Potassium Clav\"\n         },\n         {\n            \"DispStreet\":\"2177 Ocean St\",\n            \"PrescPh\":\"781-878-5200\",\n            \"RowNum\":2,\n            \"DispName\":\"WALGREENS\",\n            \"QtyDisp\":300,\n            \"DispPh\":\"781-837-2482\",\n            \"GenericName\":\"Amoxicillin (Trihydrate) For Susp 250 Mg/5ml\",\n            \"PrescName\":\"LAURA KONDRAT NP\",\n            \"DispDt\":\"02/03/15\",\n            \"DispCity\":\"Marshfield\",\n            \"addressStr\":\"2177 OCEAN ST, MARSHFIELD MA 02050\",\n            \"Strength\":\"250 Mg/5ml\",\n            \"DispZip\":2050,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Amoxicillin\"\n         },\n         {\n            \"DispStreet\":\"1880 Ocean Rd\",\n            \"PrescPh\":\"508-941-7400\",\n            \"RowNum\":5,\n            \"DispName\":\"CVS\",\n            \"QtyDisp\":3.5,\n            \"DispPh\":\"781-837-5381\",\n            \"GenericName\":\"Erythromycin Ophth Oint 5 Mg/Gm\",\n            \"PrescName\":\"JAMES J MENSCHING DO\",\n            \"DispDt\":\"01/19/15\",\n            \"DispCity\":\"Marshfield\",\n            \"addressStr\":\"1880 OCEAN RD, MARSHFIELD MA 02050\",\n            \"Strength\":\"5 Mg/Gm\",\n            \"DispZip\":2050,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Erythromycin\"\n         },\n         {\n            \"DispStreet\":\"1880 Ocean Rd\",\n            \"PrescPh\":\"781-878-5200\",\n            \"RowNum\":3,\n            \"DispName\":\"CVS\",\n            \"QtyDisp\":250,\n            \"DispPh\":\"781-837-5381\",\n            \"GenericName\":\"Amoxicillin (Trihydrate) For Susp 250 Mg/5ml\",\n            \"PrescName\":\"DANETTE T COLELLA MD\",\n            \"DispDt\":\"05/12/14\",\n            \"DispCity\":\"Marshfield\",\n            \"addressStr\":\"1880 OCEAN RD, MARSHFIELD MA 02050\",\n            \"Strength\":\"250 Mg/5ml\",\n            \"DispZip\":2050,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Amoxicillin\"\n         },\n         {\n            \"DispStreet\":\"501 North St\",\n            \"PrescPh\":null,\n            \"RowNum\":7,\n            \"DispName\":\"RITE AID\",\n            \"QtyDisp\":76,\n            \"DispPh\":\"413-499-5411\",\n            \"GenericName\":\"Clindamycin Hcl Cap 150 Mg\",\n            \"PrescName\":\"ANDREW J PLAGER\",\n            \"DispDt\":\"09/09/11\",\n            \"DispCity\":\"Pittsfield\",\n            \"addressStr\":\"501 NORTH ST, PITTSFIELD MA 01201\",\n            \"Strength\":\"150 M\",\n            \"DispZip\":1201,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Clindamycin Hcl\"\n         },\n         {\n            \"DispStreet\":\"501 North St\",\n            \"PrescPh\":\"413-562-4456\",\n            \"RowNum\":8,\n            \"DispName\":\"RITE AID\",\n            \"QtyDisp\":1,\n            \"DispPh\":\"413-499-5411\",\n            \"GenericName\":\"Peg 3350-Kcl-Nacl-Na Sulfate-Na Acorbate-C For Soln 100 Gm\",\n            \"PrescName\":\"IRA J SCHMELKIN MD\",\n            \"DispDt\":\"03/25/11\",\n            \"DispCity\":\"Pittsfield\",\n            \"addressStr\":\"501 NORTH ST, PITTSFIELD MA 01201\",\n            \"Strength\":\"7.5-2\",\n            \"DispZip\":1201,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Moviprep\"\n         },\n         {\n            \"DispStreet\":\"501 North St\",\n            \"PrescPh\":\"413-499-2054\",\n            \"RowNum\":1,\n            \"DispName\":\"RITE AID\",\n            \"QtyDisp\":7.5,\n            \"DispPh\":\"413-499-5411\",\n            \"GenericName\":\"Ciprofloxacin-Dexamethasone Otic Susp 0.3-0.1%\",\n            \"PrescName\":\"CHURYLA ALESIA MD\",\n            \"DispDt\":\"01/06/11\",\n            \"DispCity\":\"Pittsfield\",\n            \"addressStr\":\"501 NORTH ST, PITTSFIELD MA 01201\",\n            \"Strength\":\"0.3-0\",\n            \"DispZip\":1201,\n            \"DispState\":\"MA\",\n            \"hasAddress\":true,\n            \"BrandName\":\"Ciprodex\"\n         }\n      ],\n      \"totRows\":8\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "7c7cc471-cb1f-5ebb-3598-b68c643acbc6",
          "name": "getclaims",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getdependentlist\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETCLAIMS FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaims success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getdependentlist\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getclaims",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "26d51d68-1c5d-c46c-9fce-53fa5d3411b1",
          "name": "getdependentlist",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getmemberinfo\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETDEPENDENTLIST FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getdependentlist success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", \"test/getmemberinfo\");",
                  "    ",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getdependentlist",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "7dd5229a-1802-e422-b264-8e7fb06aaa16",
          "name": "getmemberinfo",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getlimitedplaninfo\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMBERINFO FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemberinfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmemberinfo",
            "description": ""
          },
          "response": [
            {
              "id": "d2364dba-74fb-2ab4-8933-57e7aa186afd",
              "name": "getdepmemberinfo ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depinfo/getdepmemberinfo"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"lastLoginDt\":\"10/05/2017\",\n         \"RowNum\":1,\n         \"visitPrvName\":\"JEFFREY LEPPO MD\",\n         \"rxStrength\":\"0.3-0\",\n         \"memFistName\":\"Ambrose\",\n         \"rxNSDC\":\"00065853302\",\n         \"rxDispPrvState\":\"MA\",\n         \"visitZip\":1201,\n         \"rxDispPrvCity\":\"PITTSFIELD\",\n         \"visitPrvNum\":\"70010000E05256\",\n         \"sythID\":\"3BA384290E4AEACFE41E59D423BFFD0FA78DE48B\",\n         \"clmSrvType\":\"Medical\",\n         \"visitSvcDt\":\"01/12/2014\",\n         \"rxPrescPrvName\":\"CHURYLA ALESIA MD\",\n         \"visitPhone\":\"413-395-7580\",\n         \"rxDrug\":\"Ciprofloxacin-Dexamethasone Otic Susp 0.3-0.1%\",\n         \"rxPrescPrvNum\":\"70010000J47687\",\n         \"clmPrvName\":\"LAWRENCE C RUSIN MD\",\n         \"visitStreet\":\"41 WACONAH ST\",\n         \"clmPaidAmt\":56.79,\n         \"clmStatus\":\"Complete\",\n         \"visitState\":\"MA\",\n         \"clmICN\":26160740416000,\n         \"numOfClmsSinceLastLogin\":0,\n         \"clmAllowAmt\":76.79,\n         \"rxDispPrvZip\":1201,\n         \"rxPrescPhone\":\"413-499-2054\",\n         \"rxDispPrvPhone\":\"413-499-5411\",\n         \"clmDOS\":\"10/28/2015\",\n         \"visitCity\":\"PITTSFIELD\",\n         \"rxDispDt\":\"01/06/2011\",\n         \"rxDispPrvNum\":70010002233043,\n         \"memMidInit\":\"B\",\n         \"memGender\":\"F\",\n         \"rxDispPrvStreet\":\"501 NORTH ST\",\n         \"rxDispPrvName\":\"RITE AID\",\n         \"memLastName\":\"Jeri\",\n         \"clmPaymtStatus\":\"Paid\",\n         \"hasDependents\":false,\n         \"visitSpec\":\"CARDIOVASCULAR DISEASE\"\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "aa495b7d-4fdb-5fe3-6a95-829128007371",
          "name": "getlimitedplaninfo",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getmemprofile\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETLIMITEDPLANINFO FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getlimitedplaninfo success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getlimitedplaninfo",
            "description": ""
          },
          "response": [
            {
              "id": "28829c07-4abf-5477-ea85-924f01da6873",
              "name": "getdeplimitedplaninfo ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/depinfo/getdeplimitedplaninfo"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"ProdDesc\":\"BLUE CHOICE PLAN 2\",\n         \"OvCopay\":25,\n         \"nurseLine\":\"1-888-247-2583\",\n         \"hasFAD\":true,\n         \"RowNum\":1,\n         \"CopayInfo\":\"Refer to your explanation of benefits or go to bluecrossma.com and select Review My Benefits for service level copayment information.\",\n         \"acctNum\":4956444,\n         \"BHCopay\":25,\n         \"rxBin\":\"RxBin: 003858 PCN: A4\",\n         \"hasRxBenefit\":true,\n         \"planModel\":true,\n         \"FADNetID\":311005011,\n         \"rxGRP\":\"RxGRP: MASA\",\n         \"hasBHBenefit\":true,\n         \"ERCopay\":100,\n         \"MemServPh\":\"1-800-238-6616\",\n         \"hasDependents\":false,\n         \"grpNum\":\"004035141\",\n         \"preventCopay\":0\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "4fbb0a42-ccd1-a13c-4a02-11c736b6f509",
          "name": "getmemprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", \"getmempreference\");",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMPROFILE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemprofile success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmemprofile",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "fdad016b-1f3e-4cad-50c5-7abdd8991c65",
          "name": "getmempreference",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMPREFERENCE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmempreference success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    //postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "    ",
                  "    postman.setNextRequest(null);  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmempreference",
            "description": ""
          },
          "response": []
        },
        {
          "_postman_id": "e7cf4fe1-76b4-3848-f08d-6fce8045ecf3",
          "name": "infoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** MEM INFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Info decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    var theNextRequest = pm.environment.get(\"nextRequest\");",
                  "    ",
                  "",
                  "    postman.setNextRequest(theNextRequest);  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": [
            {
              "id": "91917f00-ad02-38e0-3560-da9fe87d12ad",
              "name": "infoDecrypt",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "autho",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
                },
                "url": "https://{{apiURL}}/clientsidedecryption"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Connection",
                  "value": "keep-alive",
                  "name": "Connection",
                  "description": ""
                },
                {
                  "key": "Content-Length",
                  "value": "217",
                  "name": "Content-Length",
                  "description": ""
                },
                {
                  "key": "Content-Type",
                  "value": "application/json",
                  "name": "Content-Type",
                  "description": ""
                },
                {
                  "key": "Date",
                  "value": "Thu, 05 Oct 2017 17:32:50 GMT",
                  "name": "Date",
                  "description": ""
                },
                {
                  "key": "Server",
                  "value": "Apache-Coyote/1.1",
                  "name": "Server",
                  "description": ""
                },
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 05:32:50 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "bcbsma-test.apigee.net",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "592",
              "body": "{\"message\":\"\",\"result\":\"-1\",\"errormessage\":\"NO KEY FOUND FOR KEY ID-c54b2f56a6794e7d915775fb2c60fcc3 KEY TYPE-RESP GET_KEY_FOR_ID_SALTED_PR\",\"displaymessage\":\"SYSTEM ERROR - GET_KEY_FOR_ID_SALTED_PR\",\"key2value\":null}"
            }
          ]
        }
      ]
    },
    {
      "_postman_id": "34790407-9ef6-3ed6-b4c0-b3d56bc017ef",
      "name": "Update Profile",
      "description": "Updates the members profile with a key/value pair.\nThese attributes can be retrieved with getmemprofile. See the memobject in the updatememprofileEncrypt request.",
      "item": [
        {
          "_postman_id": "f3eddbf1-23e2-1e5e-cd2b-4d4e116b633b",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "5ca9d2fb-5b5f-895b-8cab-24cb44229fe1",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:55:50 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:55:50 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "88",
              "body": "{\"result\":\"0\",\"key1id\":\"5654ae6ff0fa4554af21d0570638f966\",\"key1salt\":\"b646e4f89deb50faae904b6de7c25150fbb95b4f4b91c93dec1ed7df8ac01fc8\",\"key1iv\":\"392c7b45693bf041dc99de34bb7b8279\",\"key1phrase\":\"7c2a950f445448a0aa5a0139fc9de0b4\",\"key2id\":\"773caa849db24dd9aa7b1268166f8e6c\",\"key2salt\":\"24c8df7aafcb7a541b728b9b84c31ec1ecdb316e0275950b0ce0c2bd6a20c3e1\",\"key2iv\":\"3f8535e6ed5eae3effe37747630f208a\",\"key2phrase\":\"078dcf2d87ec4b1cbb47cd939e2c890c\"}"
            }
          ]
        },
        {
          "_postman_id": "12840bf7-22f4-70db-faad-79613777b1a2",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "12e37715-2f82-3583-faea-fa3ffb01ce1d",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "   // console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(data.userid + \" Login Scope: \" + jsonData.scopename);",
                  "    //console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"updatememprofileEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "7a00e92a-806b-1b2b-832e-4d3d3b3882da",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "de5be8d1-8447-49b5-c6c2-a35da8a67ceb",
          "name": "updatememprofileEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** UPDATEMEMBERPROFILE ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsfordaterangeEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"updatememprofile\");  ",
                  "",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n{\n\"mesg\": \"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"memobject\\\":[{\\\"memkeyname\\\":\\\"weight\\\",\\\"memkeyvalue\\\":\\\"150\\\"},{\\\"memkeyname\\\":\\\"shoesize\\\",\\\"memkeyvalue\\\":\\\"9.5\\\"}],\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the updateprofile request"
          },
          "response": []
        },
        {
          "_postman_id": "b0d276e4-8713-b186-681a-f05e2b40ec40",
          "name": "updatememprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "",
                  "",
                  "    tests[\"Updatememberprofile success:\" + data.userid] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(\"meminfoEncrypt\");  ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[data.testcase + \" ****** UPDATEMEMBERPROFILE FAILED ****** \" + data.userid + \" \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/updatememprofile",
            "description": "Updates user/member profile with a key/value set."
          },
          "response": [
            {
              "id": "f1e9e9bd-c309-e745-2a58-42cdaaed8905",
              "name": "updatememprofile ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/info/updatememprofile"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "4a18f54e-3d37-416c-d2bb-5d60298eabd8",
          "name": "meminfoEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** MEMINFO ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Information encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getmemprofile\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "06583a6e-aa74-2905-97d7-78b8f896e9d3",
          "name": "getmemprofile",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMPROFILE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmemprofile success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmemprofile",
            "description": "Retrieves the member profile attributes set with updatememprofile."
          },
          "response": [
            {
              "id": "f6b827f7-1816-3b3f-836d-3b5e275e7f45",
              "name": "getmemprofile example response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/info/getmemprofile"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"usr_shoesize\":9.5,\n         \"source\":\"usr\",\n         \"usr_weight\":150,\n         \"usr_lastlogin\":\"10/06/2017\",\n         \"usr_prevlogin\":\"10/05/2017\"\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "8c2fd288-15d2-f409-c414-e94a774e91c3",
          "name": "infoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** MEM INFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Info decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    var theNextRequest = pm.environment.get(\"nextRequest\");",
                  "    ",
                  "",
                  "    postman.setNextRequest(theNextRequest);  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": []
        }
      ]
    },
    {
      "_postman_id": "9d40ec32-9747-8302-ddd0-5e8786fec0a3",
      "name": "Update Preference",
      "description": "Updates the members profile with a key/value pair.See the memobject in the updatemempreferenceEncrypt request.",
      "item": [
        {
          "_postman_id": "0c78551b-2d82-02a9-8a9c-a5555e0609f7",
          "name": "GetTokens",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "console.log(\"Begin Test Case: \" + data.testcase);",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "    ",
                  "    tests[\"Get tokens Success\"] = true === true;",
                  "    postman.setEnvironmentVariable(\"Ekey1id\", jsonData.key1id);",
                  "    postman.setEnvironmentVariable(\"Ekey2id\", jsonData.key2id);   ",
                  "",
                  "    postman.setNextRequest(\"loginEncrypt\"); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"****** GET TOKENS FAILED ******\"] = true === false; ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "body": {},
            "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens",
            "description": "Response Definition:\rresult  zero indicates a valid response  any negative number indicates an error condition\r\rkey1id  Request encryption key id (use this as a clear attribute in the request body (see register member API for example)\r\rkey1 salt  Request encryption Salt value to be used when generating the request key  \r\r\rkey1 iv  Request encryption Initialization Vector (IV) value to be used when encrypting the clear text message using request key.\r\rkey1 phrase  Request encryption passphrase value to be used when generating the request key  \r\rkey2id  Response decryption key id (put this in the put this in the message body of the request if response contains any PII or PHI data) should be encrypted with the request body. \r\r Key2 salt  Response encryption Salt value to be used when generating the Response key  \r\rKey2 iv  Response decryption Initialization Vector (IV) value to be used when decrypting the encrypted response message using response key.\r\rKey2 phrase  Response decryption passphrase value to be used when generating the response key  \r"
          },
          "response": [
            {
              "id": "a8578644-0db6-ca9c-0094-27225e674982",
              "name": "GetTokens",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "body": {},
                "url": "https://mobilememberstage.bluecrossma.com/{{tokensURL}}/mobilekeyservice/v1/gettokens"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "text",
              "header": [
                {
                  "key": "Set-Cookie",
                  "value": "NSC_MCWt-Npcjmfnfncfstubhf=ffffffff09dad72245525d5f4f58455e445a4a42378b;Version=1;Max-Age=43200;path=/;secure;httponly",
                  "name": "Set-Cookie",
                  "description": ""
                },
                {
                  "key": "content-length",
                  "value": "442",
                  "name": "content-length",
                  "description": ""
                },
                {
                  "key": "content-type",
                  "value": "application/json; charset=utf-8",
                  "name": "content-type",
                  "description": ""
                },
                {
                  "key": "date",
                  "value": "Thu, 05 Oct 2017 19:55:26 GMT",
                  "name": "date",
                  "description": ""
                },
                {
                  "key": "p3p",
                  "value": "CP=\"NON CUR OTPi OUR NOR UNI\"",
                  "name": "p3p",
                  "description": ""
                },
                {
                  "key": "server",
                  "value": "Apache-Coyote/1.1",
                  "name": "server",
                  "description": ""
                }
              ],
              "cookie": [
                {
                  "expires": "Fri Oct 06 2017 07:55:25 GMT+0000 (UTC)",
                  "httpOnly": true,
                  "domain": "mobilememberstage.bluecrossma.com",
                  "path": "/",
                  "secure": true,
                  "value": "ffffffff09dad72245525d5f4f58455e445a4a42378b",
                  "key": "NSC_MCWt-Npcjmfnfncfstubhf"
                }
              ],
              "responseTime": "87",
              "body": "{\"result\":\"0\",\"key1id\":\"7479356994724032a040cbefd335aca6\",\"key1salt\":\"0e9f5864c4a7cd31d171d650b7e6e4aff332fc82a5cd88427ed9fada02435436\",\"key1iv\":\"faa36c95de07234a4278ee14cf11d672\",\"key1phrase\":\"48839e69667c4df29a5dab1b50c65dfc\",\"key2id\":\"07be2695671841df9649f6d62be8b028\",\"key2salt\":\"db5470fb44d88b6cb5792318ed621b8639609c26764fbd04c5ee9a9ba8496e7a\",\"key2iv\":\"e6d781a88139bf0b7c405a388c09c4e3\",\"key2phrase\":\"2449418065d140428a32276076533329\"}"
            }
          ]
        },
        {
          "_postman_id": "2a1386b5-89a1-a907-270f-10525935be9f",
          "name": "loginEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** LOGIN ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"memberlogin\");  ",
                  "",
                  "}",
                  "",
                  "",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\n{\"mesg\":\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\"key1id\":\"{{Ekey1id}}\"}\n\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "789dc553-fce3-c8a6-c900-884a02da71e1",
          "name": "memberlogin",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.access_token === undefined){",
                  "    ",
                  "    tests[data.testcase + \" ****** LOGIN REQUEST FAILED ****** \" + jsonData.errormessage] = true === false;",
                  "",
                  "   // console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Login success: \" + data.userid + \" \" + jsonData.scopename] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"loginScope\", jsonData.scopename);",
                  "    postman.setEnvironmentVariable(\"loginAccessToken\", jsonData.access_token); ",
                  "    ",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    console.log(data.userid + \" Login Scope: \" + jsonData.scopename);",
                  "    //console.log(\"Login Access Token: \" + jsonData.access_token);",
                  "",
                  "    ",
                  "    postman.setNextRequest(\"updatemempreferenceEncrypt\");  ",
                  "",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/access/memberlogin",
            "description": "This API is used for member to login into member application. The member provides username and password. The details are checked at the backend system and if they are valid, they would get back a OAUTH token with appropriate permissions to access other APIs based on the user state. "
          },
          "response": [
            {
              "id": "e8a9b06b-e9b1-cef4-c454-324518bfc3d2",
              "name": "memberlogin ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/access/memberlogin"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"scopename\": \"ACTIVE-AUTHENTICATED-AND-VERIFIED\",\n    \"access_token\": \"vAGFPKQcIF9RGO6acmTaWnOgMIO1\",\n    \"refresh_token\": \"UBsKDgxAPNJ8UOjRqvm5lGKTo22A2brb\",\n    \"issued\": \"2017-Oct-05T19:48:59.665+00:00\",\n    \"access_token_expires\": \"2017-Oct-05T19:58:58.665+00:00\",\n    \"refresh_token_expires\": \"2017-Oct-05T19:48:59.665+00:00\"\n}"
            }
          ]
        },
        {
          "_postman_id": "e73f3990-1298-9283-05ea-307796b1d045",
          "name": "updatemempreferenceEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** UPDATEMEMBERPREFERENCE ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getclaimsfordaterangeEncrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"updatemempreference\");  ",
                  "",
                  "}",
                  "",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\": \"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"passwordin\\\":\\\"{{password}}\\\",\\\"memobject\\\":[{\\\"memkeyname\\\":\\\"eobviaemail\\\",\\\"memkeyvalue\\\":\\\"No\\\"},{\\\"memkeyname\\\":\\\"besttimetocall\\\",\\\"memkeyvalue\\\":\\\"Never\\\"}],\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the updateprofile request"
          },
          "response": []
        },
        {
          "_postman_id": "ec9346c9-ed89-94d8-a53d-db3bafc74398",
          "name": "updatemempreference",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.result === \"0\"){",
                  "",
                  "",
                  "    tests[\"updatememberpreference success:\" + data.userid] = true === true;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(\"meminfoEncrypt\");  ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[data.testcase + \" ****** UPDATEMEMBERPREFERENCE FAILED ****** \" + data.userid + \" \" + jsonData.errormessage] = true === false;",
                  "    console.log(\"ERROR: \" + jsonData.errormessage);",
                  "    console.log(\"DISPLAY ERROR: \" + jsonData.displaymessage);",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    ",
                  "    postman.setNextRequest(null);     ",
                  "",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/updatemempreference",
            "description": "Updates user/member profile with a key/value set"
          },
          "response": [
            {
              "id": "8a812764-6eed-c8e9-34d6-78ed38f15d1f",
              "name": "updatemempreference ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/info/updatemempreference"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n    \"result\": \"0\",\n    \"errormessage\": null,\n    \"displaymessage\": null\n}"
            }
          ]
        },
        {
          "_postman_id": "89bd701b-17f6-e20b-4237-f4ea786670f7",
          "name": "meminfoEncrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** MEMINFO ENCRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Information encrypt success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encReq\", responseBody);",
                  "",
                  "    postman.setNextRequest(\"getmempreference\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n\"mesg\":\n\"{\\\"useridin\\\":\\\"{{userid}}\\\",\\\"key2id\\\":\\\"{{Ekey2id}}\\\"}\",\n\"key1id\":\"{{Ekey1id}}\"\n}\n"
            },
            "url": "https://{{apiURL}}/clientsideencryption",
            "description": "Encrypts the request body"
          },
          "response": []
        },
        {
          "_postman_id": "64acea17-d481-6e07-4a52-f12e04b77971",
          "name": "getmempreference",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "postman.setEnvironmentVariable(\"nextRequest\", null);",
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.message === undefined){",
                  "    ",
                  "    tests[\"****** GETMEMPROFILE FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    console.log(\"Error:\" + jsonData.errormessage);    ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"getmempreference success\"] = true === true;",
                  "",
                  "    postman.setEnvironmentVariable(\"encResp\", jsonData.message);",
                  "",
                  "    postman.setNextRequest(\"infoDecrypt\");  ",
                  "",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{{encReq}}"
            },
            "url": "https://{{apiURL}}/member/v1/info/getmemprofile",
            "description": "Retrieves the member preference attributes set with updatemempreference."
          },
          "response": [
            {
              "id": "30e85380-bad5-508f-2de5-618d2f934728",
              "name": "getmempreference ok response",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{loginAccessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{encReq}}"
                },
                "url": "https://{{apiURL}}/member/v1/info/getmempreference"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "_postman_previewtype": "parsed",
              "header": [],
              "cookie": [],
              "responseTime": "0",
              "body": "{\n   \"ROWSET\":{\n      \"ROWS\":{\n         \"source\":\"pref\",\n         \"pref_eobviaemail\":\"No\",\n         \"pref_besttimetocall\":\"Never\"\n      },\n      \"totRows\":1\n   }\n}"
            }
          ]
        },
        {
          "_postman_id": "9a2b013c-393b-4ea5-85be-dea167857c47",
          "name": "infoDecrypt",
          "event": [
            {
              "listen": "test",
              "script": {
                "type": "text/javascript",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "if (jsonData.JSONRESPMESG === undefined){",
                  "    ",
                  "    tests[\"****** MEM INFO DECRYPT FAILED ******\"] = true === false;",
                  "    console.log(\"Test Case:\" + data.testcase);    ",
                  "    postman.setNextRequest(null); ",
                  "        ",
                  "}else{",
                  "    ",
                  "    tests[\"Mem Info decrypt success\"] = true === true;",
                  "",
                  "    console.log(\"Test Case:\" + data.testcase + \" Decrypted Response:\");",
                  "    console.log(jsonData.JSONRESPMESG);",
                  "",
                  "    var theNextRequest = pm.environment.get(\"nextRequest\");",
                  "    ",
                  "",
                  "    postman.setNextRequest(theNextRequest);  ",
                  "",
                  "",
                  "}",
                  ""
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "autho",
                "value": "Bearer {{loginAccessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"message\": \"{{encResp}}\",\n    \"key2id\":\"{{Ekey2id}}\"\n}"
            },
            "url": "https://{{apiURL}}/clientsidedecryption",
            "description": ""
          },
          "response": []
        }
      ]
    }
  ]
}